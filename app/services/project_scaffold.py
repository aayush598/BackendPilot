import os
import json
import re
from app.utils.logger import log_info, log_error
from app.utils.qroq_api import generate_with_qroq
from app.utils.file_helpers import write_file
from app.database.models import insert_project_data

def generate_project_structure(project_name: str, description: str) -> dict:
    try:
        # Prompt Template using f-string
        prompt = f"""
        You are an expert software architect. Based on the following project description, generate only the folder structure in a clean, clear, and scalable format. Use Python and Flask as the base. Do not include any additional information like explanations or other content.

        Project Description:
        \"{description}\"

        Return only the folder structure in a JSON format like:
        {{
          "project_root": "my_project",
          "structure": {{
            "app": {{
              "routes": ["file1.py", "file2.py"],
              "services": ["service1.py"],
              ...
            }},
            "tests": ["test_file1.py"],
            ...
          }}
        }}
        """
        
        log_info(f"Generating project structure for: {project_name}")
        ai_response = generate_with_qroq(prompt)

        print(f"ai_response : {ai_response}")

        # Clean the AI response using the clean_ai_response function
        structure_data = clean_ai_response(ai_response)

        print(f"structure_data : {structure_data}")

        if not structure_data.get("structure"):
            log_error(f"Invalid structure data returned for {project_name}.")
            return {"success": False, "error": "Invalid structure data"}

        # Target base folder
        base_folder = os.path.join("generated_projects", project_name)
        os.makedirs(base_folder, exist_ok=True)

        # Recursively create structure
        _create_structure(base_folder, structure_data.get("structure", {}))

        # Save the structure
        structure_path = os.path.join(base_folder, "structure.json")
        with open(structure_path, "w", encoding="utf-8") as f:
            json.dump(structure_data, f, indent=2)

        # Store in database
        folder_structure_str = json.dumps(structure_data.get("structure", {}), indent=2)
        insert_project_data(project_name, description, folder_structure_str)

        log_info(f"Project structure saved at: {base_folder}")
        return {"success": True, "path": base_folder, "structure": structure_data}

    except Exception as e:
        log_error(f"Project Scaffold Error: {str(e)}")
        return {"success": False, "error": str(e)}

# Helper function to clean AI response using regex
def clean_ai_response(ai_response: str) -> dict:
    # Remove the JSON block wrapper and backticks
    cleaned_response = re.sub(r'```json\s*|\s*```', '', ai_response)

    try:
        # Parse the cleaned response as JSON
        structure_data = json.loads(cleaned_response)
        return structure_data
    except json.JSONDecodeError:
        log_error("Failed to parse cleaned AI response into JSON.")
        return {"success": False, "error": "Invalid JSON from AI"}




def _create_structure(base_path: str, structure: dict):
    for name, content in structure.items():
        current_path = os.path.join(base_path, name)

        if isinstance(content, dict):
            os.makedirs(current_path, exist_ok=True)
            _create_structure(current_path, content)

        elif isinstance(content, list):
            os.makedirs(base_path, exist_ok=True)
            for file_name in content:
                file_path = os.path.join(base_path, file_name)
                write_file(file_path, "# Auto-generated by Qroq\n")

        else:
            log_error(f"Unknown structure type for {name}: {content}")
